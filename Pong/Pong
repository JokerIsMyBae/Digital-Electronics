library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity Pong is
    Port(CLK100MHZ : in std_logic;
         BTNU : in std_logic;
         BTNL : in std_logic;
         BTNR : in std_logic;
         BTND : in std_logic;
         --AN : out std_logic_vector(7 downto 0);
         --CA : out std_logic_vector(6 downto 0);
         VGA_R : out std_logic_vector(3 downto 0);
         VGA_G : out std_logic_vector(3 downto 0);
         VGA_B : out std_logic_vector(3 downto 0);
         HS : out std_logic;
         VS : out std_logic);
end Pong;

architecture Behavioral of Pong is

component Borders
    port(CLK100MHZ : in std_logic;
         write_h : out std_logic := '0';
         write_v : out std_logic := '0';
         HS : out std_logic;
         VS : out std_logic);
end component;

component PongBat
    port(CLK100MHZ : in std_logic;
         VGA_R : out std_logic_vector(3 downto 0);
         VGA_G : out std_logic_vector(3 downto 0);
         VGA_B : out std_logic_vector(3 downto 0);
         HS : out std_logic;
         VS : out std_logic;
         BTNU : in std_logic;
         BTNL : in std_logic;
         BTNR : in std_logic;
         BTND : in std_logic;
         write_hP12 : out std_logic;
         write_vP1 : out std_logic;
         write_vP2 : out std_logic);
end component;

    signal write_h : std_logic;
    signal write_v : std_logic;
    signal write_hP12 : std_logic;
    signal write_vP1 : std_logic;
    signal write_vP2 : std_logic;
    signal counter1 : integer :=0;
    signal counter2 : integer :=0;
    signal counter3 : integer :=0;
    
    
    type tColor is array(0 to 9) of std_logic_vector(3 downto 0);
            constant cColor : tColor := ("0000",  --0
                                         "0001", 
                                         "0010", 
                                         "0011", 
                                         "0100", 
                                         "0101", 
                                         "0110", 
                                         "0111", 
                                         "1000", 
                                         "1001",
                                         "1010",
                                         "1011",
                                         "1100",
                                         "1101",
                                         "1110",
                                         "1111"); --15
    
begin

Border : Borders
    port map(CLK100MHZ => CLK100MHZ,
             HS => HS,
             VS => VS,
             write_h => write_h,
             write_v => write_v);
             
Bat : PongBat
    port map(CLK100MHZ => CLK100MHZ,
             VGA_R => VGA_R,
             VGA_G => VGA_G,
             VGA_B => VGA_B,
             HS => HS,
             VS => VS,
             BTNU => BTNU,
             BTNL => BTNL,
             BTNR => BTNR,
             BTND => BTND,
             write_hP12 => write_hP12,
             write_vP1 => write_vP1,
             write_vP2 => write_vP2);

    pColorchoice : process(BallHit,counter1,counter2,counter3) --put ball hit here
begin
    counter1 <= 0;
    counter2 <= 0;
    counter3 <= 0;
    if counter1 >= 10 then
        counter1 <= 0;
    elsif counter2 >= 10 then
        counter2 <= counter2 - 10;
    elsif counter3 >= 10 then
        counter3 <= counter3 - 10;
    end if;
    if BallHit = '1' then
        counter1 <= counter1 + 1;
        counter2 <= counter1 + counter2;
        counter3 <= counter2 + counter3;
    end if;
end process;
        
        

    pWrite : process(write_h,write_v,write_hP12,write_vP1,write_vP2)
begin
    if write_h = '1' or write_v = '1' then
        VGA_R <= "1111";
        VGA_G <= "1111";
        VGA_B <= "1111";
    elsif write_hP12 = '1' and write_vP1 = '1' then
        VGA_R <= "0000";
        VGA_G <= "1111";
        VGA_B <= "1111";
    elsif write_hP12 = '1' and write_vP2 = '1' then
        VGA_R <= "1111";
        VGA_G <= "0000";
        VGA_B <= "1111";
    else 
        VGA_R <= (others => '0');
        VGA_G <= (others => '0');
        VGA_B <= (others => '0');
    end if;
end process;

end Behavioral;
